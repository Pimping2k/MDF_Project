//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.11.2
//     from Assets/InputActions/IA_PlayerControl.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @IA_PlayerControl: IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @IA_PlayerControl()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""IA_PlayerControl"",
    ""maps"": [
        {
            ""name"": ""PlayerControl"",
            ""id"": ""14bf6835-a5c1-455c-98db-fe199a522794"",
            ""actions"": [
                {
                    ""name"": ""GetDamage"",
                    ""type"": ""Button"",
                    ""id"": ""024f0b37-5df3-43ec-a0b1-369c4a6892a9"",
                    ""expectedControlType"": """",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""ZoomIn"",
                    ""type"": ""Button"",
                    ""id"": ""68c79862-9fa8-498f-9560-5ffbb0573c24"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""ZoomOut"",
                    ""type"": ""Button"",
                    ""id"": ""a62c2830-bf14-47af-9815-cbff4e55570a"",
                    ""expectedControlType"": """",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""2fb92556-a0b7-47b7-848d-469b9187dee3"",
                    ""path"": ""<Keyboard>/space"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""GetDamage"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""3a63254a-47da-4e6f-9360-fa90b0037866"",
                    ""path"": ""<Keyboard>/w"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""ZoomIn"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""5709dbec-1eb7-464b-b4c3-a3b64e5644f6"",
                    ""path"": ""<Keyboard>/s"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""ZoomOut"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        },
        {
            ""name"": ""PlayerMovement"",
            ""id"": ""30a5b1b2-f9d7-417a-a8a7-928b0e62746d"",
            ""actions"": [
                {
                    ""name"": ""Move"",
                    ""type"": ""Value"",
                    ""id"": ""bb321a96-b128-48d7-a9de-c45324fcaa71"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""Interact"",
                    ""type"": ""Button"",
                    ""id"": ""9305027a-4e1c-45b7-adeb-6e625722575f"",
                    ""expectedControlType"": """",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": ""WASD"",
                    ""id"": ""89efaa71-2005-4669-9379-4386487cbac3"",
                    ""path"": ""2DVector"",
                    ""interactions"": """",
                    ""processors"": ""NormalizeVector2"",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""up"",
                    ""id"": ""b08893d2-f107-49f1-9a6b-729cb8a4bf57"",
                    ""path"": ""<Keyboard>/w"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""down"",
                    ""id"": ""95e0b447-f62b-416a-b008-e2559535390e"",
                    ""path"": ""<Keyboard>/s"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""left"",
                    ""id"": ""da64638b-0f30-41c2-8984-0dba86ddb3bb"",
                    ""path"": ""<Keyboard>/a"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""right"",
                    ""id"": ""e5b6bb16-f0d6-4aab-9359-e6e799270670"",
                    ""path"": ""<Keyboard>/d"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": """",
                    ""id"": ""096e0dd4-f228-4bf9-9938-2725bae0b4fa"",
                    ""path"": ""<Keyboard>/e"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Interact"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        },
        {
            ""name"": ""PlayerMouseInteraction"",
            ""id"": ""b6a6eecd-f6b2-4c11-a521-62ee5763aefd"",
            ""actions"": [
                {
                    ""name"": ""LMBAction"",
                    ""type"": ""Button"",
                    ""id"": ""546d6e27-7bcd-4d42-a0f9-fd3426222a37"",
                    ""expectedControlType"": """",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""RMBAction"",
                    ""type"": ""Button"",
                    ""id"": ""109ba00c-5c3a-4dc9-88c0-2fab984525db"",
                    ""expectedControlType"": """",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""cd157ba7-2c4c-4da9-ad44-051225c5e655"",
                    ""path"": ""<Mouse>/leftButton"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""LMBAction"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""0a7253d9-d8ad-466f-83a0-9a0c97ea6eab"",
                    ""path"": ""<Mouse>/rightButton"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""RMBAction"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": []
}");
        // PlayerControl
        m_PlayerControl = asset.FindActionMap("PlayerControl", throwIfNotFound: true);
        m_PlayerControl_GetDamage = m_PlayerControl.FindAction("GetDamage", throwIfNotFound: true);
        m_PlayerControl_ZoomIn = m_PlayerControl.FindAction("ZoomIn", throwIfNotFound: true);
        m_PlayerControl_ZoomOut = m_PlayerControl.FindAction("ZoomOut", throwIfNotFound: true);
        // PlayerMovement
        m_PlayerMovement = asset.FindActionMap("PlayerMovement", throwIfNotFound: true);
        m_PlayerMovement_Move = m_PlayerMovement.FindAction("Move", throwIfNotFound: true);
        m_PlayerMovement_Interact = m_PlayerMovement.FindAction("Interact", throwIfNotFound: true);
        // PlayerMouseInteraction
        m_PlayerMouseInteraction = asset.FindActionMap("PlayerMouseInteraction", throwIfNotFound: true);
        m_PlayerMouseInteraction_LMBAction = m_PlayerMouseInteraction.FindAction("LMBAction", throwIfNotFound: true);
        m_PlayerMouseInteraction_RMBAction = m_PlayerMouseInteraction.FindAction("RMBAction", throwIfNotFound: true);
    }

    ~@IA_PlayerControl()
    {
        UnityEngine.Debug.Assert(!m_PlayerControl.enabled, "This will cause a leak and performance issues, IA_PlayerControl.PlayerControl.Disable() has not been called.");
        UnityEngine.Debug.Assert(!m_PlayerMovement.enabled, "This will cause a leak and performance issues, IA_PlayerControl.PlayerMovement.Disable() has not been called.");
        UnityEngine.Debug.Assert(!m_PlayerMouseInteraction.enabled, "This will cause a leak and performance issues, IA_PlayerControl.PlayerMouseInteraction.Disable() has not been called.");
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }

    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }

    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // PlayerControl
    private readonly InputActionMap m_PlayerControl;
    private List<IPlayerControlActions> m_PlayerControlActionsCallbackInterfaces = new List<IPlayerControlActions>();
    private readonly InputAction m_PlayerControl_GetDamage;
    private readonly InputAction m_PlayerControl_ZoomIn;
    private readonly InputAction m_PlayerControl_ZoomOut;
    public struct PlayerControlActions
    {
        private @IA_PlayerControl m_Wrapper;
        public PlayerControlActions(@IA_PlayerControl wrapper) { m_Wrapper = wrapper; }
        public InputAction @GetDamage => m_Wrapper.m_PlayerControl_GetDamage;
        public InputAction @ZoomIn => m_Wrapper.m_PlayerControl_ZoomIn;
        public InputAction @ZoomOut => m_Wrapper.m_PlayerControl_ZoomOut;
        public InputActionMap Get() { return m_Wrapper.m_PlayerControl; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(PlayerControlActions set) { return set.Get(); }
        public void AddCallbacks(IPlayerControlActions instance)
        {
            if (instance == null || m_Wrapper.m_PlayerControlActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_PlayerControlActionsCallbackInterfaces.Add(instance);
            @GetDamage.started += instance.OnGetDamage;
            @GetDamage.performed += instance.OnGetDamage;
            @GetDamage.canceled += instance.OnGetDamage;
            @ZoomIn.started += instance.OnZoomIn;
            @ZoomIn.performed += instance.OnZoomIn;
            @ZoomIn.canceled += instance.OnZoomIn;
            @ZoomOut.started += instance.OnZoomOut;
            @ZoomOut.performed += instance.OnZoomOut;
            @ZoomOut.canceled += instance.OnZoomOut;
        }

        private void UnregisterCallbacks(IPlayerControlActions instance)
        {
            @GetDamage.started -= instance.OnGetDamage;
            @GetDamage.performed -= instance.OnGetDamage;
            @GetDamage.canceled -= instance.OnGetDamage;
            @ZoomIn.started -= instance.OnZoomIn;
            @ZoomIn.performed -= instance.OnZoomIn;
            @ZoomIn.canceled -= instance.OnZoomIn;
            @ZoomOut.started -= instance.OnZoomOut;
            @ZoomOut.performed -= instance.OnZoomOut;
            @ZoomOut.canceled -= instance.OnZoomOut;
        }

        public void RemoveCallbacks(IPlayerControlActions instance)
        {
            if (m_Wrapper.m_PlayerControlActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(IPlayerControlActions instance)
        {
            foreach (var item in m_Wrapper.m_PlayerControlActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_PlayerControlActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public PlayerControlActions @PlayerControl => new PlayerControlActions(this);

    // PlayerMovement
    private readonly InputActionMap m_PlayerMovement;
    private List<IPlayerMovementActions> m_PlayerMovementActionsCallbackInterfaces = new List<IPlayerMovementActions>();
    private readonly InputAction m_PlayerMovement_Move;
    private readonly InputAction m_PlayerMovement_Interact;
    public struct PlayerMovementActions
    {
        private @IA_PlayerControl m_Wrapper;
        public PlayerMovementActions(@IA_PlayerControl wrapper) { m_Wrapper = wrapper; }
        public InputAction @Move => m_Wrapper.m_PlayerMovement_Move;
        public InputAction @Interact => m_Wrapper.m_PlayerMovement_Interact;
        public InputActionMap Get() { return m_Wrapper.m_PlayerMovement; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(PlayerMovementActions set) { return set.Get(); }
        public void AddCallbacks(IPlayerMovementActions instance)
        {
            if (instance == null || m_Wrapper.m_PlayerMovementActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_PlayerMovementActionsCallbackInterfaces.Add(instance);
            @Move.started += instance.OnMove;
            @Move.performed += instance.OnMove;
            @Move.canceled += instance.OnMove;
            @Interact.started += instance.OnInteract;
            @Interact.performed += instance.OnInteract;
            @Interact.canceled += instance.OnInteract;
        }

        private void UnregisterCallbacks(IPlayerMovementActions instance)
        {
            @Move.started -= instance.OnMove;
            @Move.performed -= instance.OnMove;
            @Move.canceled -= instance.OnMove;
            @Interact.started -= instance.OnInteract;
            @Interact.performed -= instance.OnInteract;
            @Interact.canceled -= instance.OnInteract;
        }

        public void RemoveCallbacks(IPlayerMovementActions instance)
        {
            if (m_Wrapper.m_PlayerMovementActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(IPlayerMovementActions instance)
        {
            foreach (var item in m_Wrapper.m_PlayerMovementActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_PlayerMovementActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public PlayerMovementActions @PlayerMovement => new PlayerMovementActions(this);

    // PlayerMouseInteraction
    private readonly InputActionMap m_PlayerMouseInteraction;
    private List<IPlayerMouseInteractionActions> m_PlayerMouseInteractionActionsCallbackInterfaces = new List<IPlayerMouseInteractionActions>();
    private readonly InputAction m_PlayerMouseInteraction_LMBAction;
    private readonly InputAction m_PlayerMouseInteraction_RMBAction;
    public struct PlayerMouseInteractionActions
    {
        private @IA_PlayerControl m_Wrapper;
        public PlayerMouseInteractionActions(@IA_PlayerControl wrapper) { m_Wrapper = wrapper; }
        public InputAction @LMBAction => m_Wrapper.m_PlayerMouseInteraction_LMBAction;
        public InputAction @RMBAction => m_Wrapper.m_PlayerMouseInteraction_RMBAction;
        public InputActionMap Get() { return m_Wrapper.m_PlayerMouseInteraction; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(PlayerMouseInteractionActions set) { return set.Get(); }
        public void AddCallbacks(IPlayerMouseInteractionActions instance)
        {
            if (instance == null || m_Wrapper.m_PlayerMouseInteractionActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_PlayerMouseInteractionActionsCallbackInterfaces.Add(instance);
            @LMBAction.started += instance.OnLMBAction;
            @LMBAction.performed += instance.OnLMBAction;
            @LMBAction.canceled += instance.OnLMBAction;
            @RMBAction.started += instance.OnRMBAction;
            @RMBAction.performed += instance.OnRMBAction;
            @RMBAction.canceled += instance.OnRMBAction;
        }

        private void UnregisterCallbacks(IPlayerMouseInteractionActions instance)
        {
            @LMBAction.started -= instance.OnLMBAction;
            @LMBAction.performed -= instance.OnLMBAction;
            @LMBAction.canceled -= instance.OnLMBAction;
            @RMBAction.started -= instance.OnRMBAction;
            @RMBAction.performed -= instance.OnRMBAction;
            @RMBAction.canceled -= instance.OnRMBAction;
        }

        public void RemoveCallbacks(IPlayerMouseInteractionActions instance)
        {
            if (m_Wrapper.m_PlayerMouseInteractionActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(IPlayerMouseInteractionActions instance)
        {
            foreach (var item in m_Wrapper.m_PlayerMouseInteractionActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_PlayerMouseInteractionActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public PlayerMouseInteractionActions @PlayerMouseInteraction => new PlayerMouseInteractionActions(this);
    public interface IPlayerControlActions
    {
        void OnGetDamage(InputAction.CallbackContext context);
        void OnZoomIn(InputAction.CallbackContext context);
        void OnZoomOut(InputAction.CallbackContext context);
    }
    public interface IPlayerMovementActions
    {
        void OnMove(InputAction.CallbackContext context);
        void OnInteract(InputAction.CallbackContext context);
    }
    public interface IPlayerMouseInteractionActions
    {
        void OnLMBAction(InputAction.CallbackContext context);
        void OnRMBAction(InputAction.CallbackContext context);
    }
}
